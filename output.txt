Title: index.js
import { createRequire } from "module";
import { app, BrowserWindow, ipcMain, dialog } from "electron";
import path from "path";
import url from "url";
import fs from "fs";

// You don't need to import ipcMain again with require, it's already imported above
// const { ipcMain } = require('electron'); <-- Remove this line

const require = createRequire(import.meta.url);
const __dirname = path.dirname(url.fileURLToPath(import.meta.url));

// Import and configure electron-reload
const electronReload = require('electron-reload');
electronReload(path.join(__dirname, 'public'), {
    electron: path.join(__dirname, 'node_modules', '.bin', 'electron')
});

app.on("ready", () => {
  const mainWindow = new BrowserWindow({
    width: 300, // Set the initial width
    height: 450, // Set the initial height
    frame: false, // Remove the window frame
    transparent: true, // Make the window transparent
    resizable: true, // Allow resizing
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.cjs')
    },
  });

  mainWindow.loadFile(path.join(__dirname, "public", "index.html"));
  
  // IPC listener for minimizing the app
  ipcMain.on('minimize-window', () => {
    mainWindow.minimize();
  });

  // Restore window when clicked on taskbar icon
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      mainWindow.show();
    }
  });

  // Function to select folder and check if it's empty
  function selectFolderAndCheckEmpty() {
    dialog.showOpenDialog(mainWindow, {
      properties: ['openDirectory']
    }).then(result => {
      if (!result.canceled && result.filePaths.length > 0) {
        const folderPath = result.filePaths[0];
        fs.readdir(folderPath, (err, files) => {
          if (err) {
            console.error('Error reading directory', err);
            return;
          }
          if (files.length === 0) {
            console.log('Folder Name Selected: Empty');
            // Handle empty folder case
          } else {
            console.log(`Folder Name Selected: ${path.basename(folderPath)}`);
            // Handle folder with files
          }
        });
      }
    }).catch(err => {
      console.error('Error selecting folder', err);
    });
  }

  // IPC listener for folder selection
  ipcMain.on('select-folder', selectFolderAndCheckEmpty);
});
END OF CODE

Title: global.css
html, body {
	position: relative;
}
.app-background {
	border-radius: 10px;
	position: fixed; /* Position it relative to the viewport */
	top: 0; /* Stick it to the top */
	left: 0; /* Stick it to the left */
	right: 0; /* Stick it to the right */
	bottom: 0; /* Stick it to the bottom */
	text-align: center;
	padding: 0; /* Set padding to 0 */
	margin: 0; /* Set margin to 0 */
	background-color:#C4E1F1;  /* Updated Light blue background */
	user-select: none; /* Prevent text selection */
	display: flex; /* Use flexbox layout */
	flex-direction: column; /* Stack children vertically */
	justify-content: flex-start; /* Align children to the top */
	align-items: center; /* Center children horizontally */
	box-sizing: border-box; /* Include padding in the width and height */
	border: 5px solid #3949ab; /* Add border line with color #3949ab and size 1px */
}

.title {
	margin-bottom: 20px;
	color: #3949ab; /* White text */
	text-transform: uppercase;
	font-size: 2.25em;
	font-weight: bold; /* Bold text */
	font-family: 'Roboto', sans-serif;
	text-shadow: 1.5px 1.5px 2.75px #1a237e; /* Add text shadow */
}

.line {
	height: 5px;
	width: 100%;
	margin: 5px 0; /* Reduced space to 5px */
	transition: background-color 0.5s ease;
}

button {
	-webkit-app-region: no-drag;
	margin: 0.5em;
	padding: 0.5em 1em;
	font-size: 1em;
	border: none;
	border-radius: 5px;
	background-color: #3949ab; /* Indigo background */
	color: #ffffff; /* Light Indigo text */
	cursor: pointer;
	transition: background-color 0.3s ease;
	font-family: 'Roboto', sans-serif;
}

button:hover {
	background-color: #1a237e; /* Dark Indigo on hover */
}

.folder-path {
  font-family: 'Roboto', sans-serif;
  font-size: .75em;
  font-weight: bold;
}

.folder-selector-error-message {
	font-family: 'Roboto', sans-serif;
	font-size: .75em;
	font-weight: bold;
  }

@media (min-width: 640px) {
	.app-background {
		max-width: none;
	}
}
END OF CODE

Title: index.html
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset='utf-8'>
	<meta name='viewport' content='width=device-width,initial-scale=1'>
 	<meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self'">
	<title>CHANGE ME</title>

	<link rel='icon' type='image/png' href='favicon.png'>
	<link rel='stylesheet' href='global.css'>
	<link rel='stylesheet' href='build/bundle.css'>

	<script defer src='build/bundle.js'></script>
</head>

<body>
</body>
</html>

END OF CODE

Title: setupTypeScript.js
// @ts-check

/** This script modifies the project to support TS code in .svelte files like:

  <script lang="ts">
  	export let name: string;
  </script>
 
  As well as validating the code for CI.
  */

/**  To work on this script:
  rm -rf test-template template && git clone sveltejs/template test-template && node scripts/setupTypeScript.js test-template
*/

import fs from "fs"
import path from "path"
import { argv } from "process"
import url from 'url';

const __filename = url.fileURLToPath(import.meta.url);
const __dirname = url.fileURLToPath(new URL('.', import.meta.url));
const projectRoot = argv[2] || path.join(__dirname, "..")

// Add deps to pkg.json
const packageJSON = JSON.parse(fs.readFileSync(path.join(projectRoot, "package.json"), "utf8"))
packageJSON.devDependencies = Object.assign(packageJSON.devDependencies, {
  "svelte-check": "^3.0.0",
  "svelte-preprocess": "^5.0.0",
  "@rollup/plugin-typescript": "^11.0.0",
  "typescript": "^4.9.0",
  "tslib": "^2.5.0",
  "@tsconfig/svelte": "^3.0.0"
})

// Add script for checking
packageJSON.scripts = Object.assign(packageJSON.scripts, {
  "check": "svelte-check"
})

// Write the package JSON
fs.writeFileSync(path.join(projectRoot, "package.json"), JSON.stringify(packageJSON, null, "  "))

// mv src/main.js to main.ts - note, we need to edit rollup.config.js for this too
const beforeMainJSPath = path.join(projectRoot, "src", "main.js")
const afterMainTSPath = path.join(projectRoot, "src", "main.ts")
fs.renameSync(beforeMainJSPath, afterMainTSPath)

// Switch the app.svelte file to use TS
const appSveltePath = path.join(projectRoot, "src", "App.svelte")
let appFile = fs.readFileSync(appSveltePath, "utf8")
appFile = appFile.replace("<script>", '<script lang="ts">')
appFile = appFile.replace("export let name;", 'export let name: string;')
fs.writeFileSync(appSveltePath, appFile)

// Edit rollup config
const rollupConfigPath = path.join(projectRoot, "rollup.config.js")
let rollupConfig = fs.readFileSync(rollupConfigPath, "utf8")

// Edit imports
rollupConfig = rollupConfig.replace(`'rollup-plugin-css-only';`, `'rollup-plugin-css-only';
import sveltePreprocess from 'svelte-preprocess';
import typescript from '@rollup/plugin-typescript';`)

// Replace name of entry point
rollupConfig = rollupConfig.replace(`'src/main.js'`, `'src/main.ts'`)

// Add preprocessor
rollupConfig = rollupConfig.replace(
  'compilerOptions:',
  'preprocess: sveltePreprocess({ sourceMap: !production }),\n\t\t\tcompilerOptions:'
);

// Add TypeScript
rollupConfig = rollupConfig.replace(
  'commonjs(),',
  'commonjs(),\n\t\ttypescript({\n\t\t\tsourceMap: !production,\n\t\t\tinlineSources: !production\n\t\t}),'
);
fs.writeFileSync(rollupConfigPath, rollupConfig)

// Add svelte.config.js
const tsconfig = `{
  "extends": "@tsconfig/svelte/tsconfig.json",

  "include": ["src/**/*"],
  "exclude": ["node_modules/*", "__sapper__/*", "public/*"]
}`
const tsconfigPath =  path.join(projectRoot, "tsconfig.json")
fs.writeFileSync(tsconfigPath, tsconfig)

// Add TSConfig
const svelteConfig = `import sveltePreprocess from 'svelte-preprocess';

export default {
  preprocess: sveltePreprocess()
};
`
const svelteConfigPath =  path.join(projectRoot, "svelte.config.js")
fs.writeFileSync(svelteConfigPath, svelteConfig)

// Add global.d.ts
const dtsPath =  path.join(projectRoot, "src", "global.d.ts")
fs.writeFileSync(dtsPath, `/// <reference types="svelte" />`)

// Delete this script, but not during testing
if (!argv[2]) {
  // Remove the script
  fs.unlinkSync(path.join(__filename))

  // Check for Mac's DS_store file, and if it's the only one left remove it
  const remainingFiles = fs.readdirSync(path.join(__dirname))
  if (remainingFiles.length === 1 && remainingFiles[0] === '.DS_store') {
    fs.unlinkSync(path.join(__dirname, '.DS_store'))
  }

  // Check if the scripts folder is empty
  if (fs.readdirSync(path.join(__dirname)).length === 0) {
    // Remove the scripts folder
    fs.rmdirSync(path.join(__dirname))
  }
}

// Adds the extension recommendation
fs.mkdirSync(path.join(projectRoot, ".vscode"), { recursive: true })
fs.writeFileSync(path.join(projectRoot, ".vscode", "extensions.json"), `{
  "recommendations": ["svelte.svelte-vscode"]
}
`)

console.log("Converted to TypeScript.")

if (fs.existsSync(path.join(projectRoot, "node_modules"))) {
  console.log("\nYou will need to re-run your dependency manager to get started.")
}

END OF CODE

Title: FolderSelector.svelte
<script>
    export let onFolderSelect; // Accept a callback function as a prop
  
    let folderPath = '';
    let errorMessage = ''; // A variable to hold an error message if no images are found
  
    function handleFolderSelection(event) {
      const files = event.target.files;
      if (files.length > 0) {
        folderPath = files[0].webkitRelativePath.split('/')[0];
        
        let hasImageFiles = false;
        let hasNonImageFiles = false;
  
        for (let file of files) {
          const extension = file.name.split('.').pop().toLowerCase();
          if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'tiff', 'svg'].includes(extension)) {
            hasImageFiles = true;
          } else {
            hasNonImageFiles = true;
          }
  
          if (hasImageFiles && hasNonImageFiles) break; // Both types of files found, no need to continue checking
        }
  
        if (!hasImageFiles && !hasNonImageFiles) {
          errorMessage = 'Empty'; // Folder is empty
        } else if (hasImageFiles && !hasNonImageFiles) {
          errorMessage = ''; // Valid folder with only image files
        } else {
          errorMessage = 'Invalid'; // Folder contains non-image files or is mixed
        }
      } else {
        errorMessage = 'No folder was selected';
      }
    }

    // Add a function to reset the input value
    function resetInput() {
      document.getElementById('folderSelector').value = '';
    }
  </script>
  
  <!-- Update the button's on:click to call resetInput -->
  <button class="app-button" on:click={resetInput}>Select Pictures Folder</button>
  <input type="file" id="folderSelector" webkitdirectory directory style="display: none;" on:change={handleFolderSelection} />
  
  {#if errorMessage === 'Empty' || errorMessage === 'Invalid'}
    <p class="folder-path">Folder Name Selected: {errorMessage}</p>
  {:else if folderPath}
    <p class="folder-path">Folder Name Selected: "{folderPath}"</p>
  {:else}
    <p class="folder-path">Folder Name Selected: </p>
  {/if}
END OF CODE

Title: main.js
import App from './App.svelte';

const app = new App({
	target: document.body

});

export default app;
END OF CODE

Title: Topbar.svelte
<script>

function closeApp() {
    window.close();
}

function minimizeApp() {
    console.log('minimize');
    window.api.minimize();
}

</script>
<div class="title-bar">
    <div class="button-container">
        <button class="minimize-btn" on:click={minimizeApp}>-</button>
    </div>
    <div class="button-container">
        <button class="close-btn" on:click={closeApp}>X</button>
    </div>
</div>
<style>
.title-bar {
    -webkit-app-region: drag;
    display: flex;
    justify-content: right;
    width: 100%;
    background-color: #3949ab; /* Indigo background */
    padding: .01px; /* Reduce padding to make the bar smaller */
    border-top-left-radius: 10px; /* Rounded border for the top left corner */
    border-top-right-radius: 10px; /* Rounded border for the top right corner */
	border: 7px solid #3949ab;
}

.button-container {
    -webkit-app-region: no-drag;
  	display: flex;
  	justify-content: center;
  	align-items: center;
}

.title-bar .minimize-btn, .close-btn {
    -webkit-app-region: no-drag;
  	background-color: transparent;
  	border: none;
  	color: #ffffff; /* White text */
  	font-size: 0.8em; /* Reduce font size to make the buttons smaller */
  	cursor: pointer;
}
.close-btn:hover {
		background-color: #1a237e; /* Dark Indigo on hover */
	}
.minimize-btn:hover {
		background-color: #1a237e; /* Dark Indigo on hover */
	}
</style>

END OF CODE

